from aiogram.types import ReplyKeyboardMarkup, KeyboardButton  
from aiogram import Dispatcher, Bot, executor, types
from bs4 import BeautifulSoup
import urllib.request as urllib
import wikipedia, re


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ NewsBot
API_TOKEN = "5970709075:AAF1Md9l0svi7wqxjlXt9gnQ0bnu0YlSEcE"

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dispatcher = Dispatcher(bot)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –≤ Wikipedia
wikipedia.set_lang("ru")

def getwiki(s):
    try:
        ny = wikipedia.page(s)
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—ã—Å—è—á—É —Å–∏–º–≤–æ–ª–æ–≤
        wikitext=ny.content[:1000]
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
        wikimas=wikitext.split('.')
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        wikimas = wikimas[:-1]
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        wikitext2 = ''
        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –≥–¥–µ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ ¬´—Ä–∞–≤–Ω–æ¬ª (—Ç–æ –µ—Å—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        for x in wikimas:
            if not('==' in x): 
                    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Ç–æ—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
                if(len((x.strip()))>3):
                   wikitext2=wikitext2+x+'.'
            else:
                break
        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\{[^\{\}]*\}', '', wikitext2)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return wikitext2
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –º–æ–¥—É–ª—å wikipedia –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    except Exception as e:
        return '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º'

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã #
# –ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
btn_Cpp = KeyboardButton('C++')
btn_Python = KeyboardButton('Python')
btn_Habr = KeyboardButton('Habr')
btn_other = KeyboardButton('–î—Ä—É–≥–æ–µ')

main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_Cpp, btn_Python, btn_Habr, btn_other)

# –í–æ–∑–≤—Ä–∞—Ç–Ω–æ–µ –º–µ–Ω—é
btn_info = KeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
btn_main = KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')

other_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_info, btn_main)

# –ú–µ–Ω—é C++
btn_CppNews = KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ C++')
btn_CppProject = KeyboardButton('–ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ C++')
btn_back = KeyboardButton('–ù–∞–∑–∞–¥')

second_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_CppNews, btn_CppProject, btn_back)

# –ú–µ–Ω—é Python
btn_PythonNews = KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ Python')
btn_PythonProject = KeyboardButton('–ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ Python')
btn_back = KeyboardButton('–ù–∞–∑–∞–¥')

third_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(btn_PythonNews, btn_PythonProject, btn_back)

#  –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
@dispatcher.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.send_message(message.from_user.id, f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –Ω–∞ Habr.\n–ê —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –í–∏–∫–∏–ø–µ–¥–∏–µ–π, –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ª–∏—à—å –≤–≤–µ—Å—Ç–∏ —á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç.", reply_markup = main_menu)

# –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –º–µ–Ω—é
@dispatcher.message_handler()
async def messages(message: types.Message):
    url = ''
    if message.text == 'C++':
        await bot.send_message(message.from_user.id, '–û—Ç–∫—Ä—ã–≤–∞—é C++...', reply_markup = second_menu)
    elif message.text == '–ù–æ–≤–æ—Å—Ç–∏ C++':
        url = 'https://habr.com/ru/search/?q=C%2B%2B&target_type=posts&order=date'
    elif message.text == '–ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ C++':
        url = 'https://habr.com/ru/hub/cpp/'
    elif message.text == '–ù–∞–∑–∞–¥':
        await bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å', reply_markup = main_menu)
    elif message.text == 'Python':
        await bot.send_message(message.from_user.id, '–û—Ç–∫—Ä—ã–≤–∞—é Python', reply_markup = third_menu)
    elif message.text == '–ù–æ–≤–æ—Å—Ç–∏ Python':
        url = 'https://habr.com/ru/search/?q=Python&target_type=posts&order=date'
    elif message.text == '–ü—Ä–æ–µ–∫—Ç—ã –Ω–∞ Python':
        url = 'https://habr.com/ru/hub/python/'
    elif message.text == '–ù–∞–∑–∞–¥':
        await bot.send_message(message.from_user.id, '–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å', reply_markup = main_menu)
    elif message.text == 'Habr':
        url = 'https://habr.com/ru/all/'
    elif message.text == '–î—Ä—É–≥–æ–µ':
        await bot.send_message(message.from_user.id, '–û—Ç–∫—Ä—ã–≤–∞—é...', reply_markup = other_menu)
    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
        await bot.send_message(message.from_user.id, f'–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞.\n–î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∞–π—Ç–æ–º Habr, —á—Ç–æ–±—ã –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n–ë–æ—Ç —É–º–µ–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ–µ 3 –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞ —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –í–∏–∫–∏–ø–µ–¥–∏–µ–π, –¥–ª—è —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –∏–ª–∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ ,–∏–ª–∏ –¥–∞–∂–µ –¥–∞—Ç—É, –∏ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã –∏—Å–∫–∞–ª–∏.\n\n–°–æ–∑–¥–∞—Ç–µ–ª–∏:\n–ö–æ—Å –î–∞–Ω–∏–ª\n–ú–µ–¥–≤–µ–¥–µ–≤ –í–∏—Ç–∞–ª–∏–π')
    elif message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await bot.send_message(message.from_user.id, '–û—Ç–∫—Ä—ã–≤–∞—é –º–µ–Ω—é...', reply_markup = main_menu)
    else:
        await bot.send_message(message.chat.id, getwiki(message.text))

    tag = 'a'
    class_tag = 'tm-article-snippet__title-link'
    url_site = 'habr.com'

    page = urllib.urlopen(url)
    soup = BeautifulSoup(page, 'html.parser')
    article_list = (soup.find_all(tag, attrs={'class': class_tag}))[:3]

    for i in article_list:
        article = f"{i.text.strip()}\n\n{url_site}{i['href']}"
        await bot.send_message(message.from_user.id, article)

if __name__ == '__main__':
    executor.start_polling(dispatcher, skip_updates=True)